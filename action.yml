name: github-actions-github-apps-token
# MEMO: Description must be less than 125 characters.
description: 'A GitHub Action to get a GitHub Apps token'
author: 'hakadoriya'

branding:
  icon: search
  color: gray-dark

inputs:
  client-id:
    description: 'The Client ID of the GitHub App.'
    required: true
  private-key:
    description: 'The private key of the GitHub App.'
    required: true
  jwt-expiry-seconds:
    description: 'The expiry seconds of the JWT. 600 seconds maximum. (default: 600)'
    default: "600"
    required: false
  api-app-installations-access-tokens-request-body:
    description: 'The request body for the API to get the access tokens. (default: "")'
    required: false

outputs:
  token:
    value: ${{ steps.generate-apps-token.outputs.token }}
    description: 'The GitHub Apps token.'

runs:
  using: composite
  steps:
    - name: generate-apps-token
      id: generate-apps-token
      env:
        CLIENT_ID: ${{ inputs.client-id }}
        PRIVATE_KEY: ${{ inputs.private-key }}
        JWT_EXPIRY_SECONDS: ${{ inputs.jwt-expiry-seconds }}
        API_APP_INSTALLATIONS_ACCESS_TOKENS_REQUEST_BODY: ${{ inputs.api-app-installations-access-tokens-request-body }}
      shell: bash
      # ref. https://zenn.dev/tmknom/articles/github-apps-token
      run: |
        set -Eeu -o pipefail
        # base64url
        base64url() {
          openssl enc -base64 -A | tr '+/' '-_' | tr -d '='
        }
        # sign
        sign() {
          openssl dgst -binary -sha256 -sign <(printf '%s' "${PRIVATE_KEY:?}")
        }
        # JWT header
        header=$(printf '{"alg":"RS256","typ":"JWT"}' | base64url)
        # JWT payload
        now=$(date '+%s')
        iat=${now:?}
        exp=$((now + JWT_EXPIRY_SECONDS))
        payload=$(printf '{"iss":"%s","iat":%s,"exp":%s}' "${CLIENT_ID:?}" "${iat:?}" "${exp:?}" | base64url)
        echo "::add-mask::${payload:?}"
        # JWT signature
        signature=$(printf '%s' "${header:?}.${payload:?}" | sign | base64url)
        echo "::add-mask::${signature:?}"
        # JWT
        jwt="${header:?}.${payload:?}.${signature:?}"
        echo "::add-mask::${jwt:?}"
        # Get the repository installation ID
        installation_response_body=$(
          curl --location --silent --request GET \
            --url "${GITHUB_API_URL:?}/repos/${GITHUB_REPOSITORY:?}/installation" \
            --header "Accept: application/vnd.github+json" \
            --header "X-GitHub-Api-Version: 2022-11-28" \
            --header "Authorization: Bearer ${jwt:?}"
        )
        installation_id=$(jq -r '.id' <<<"${installation_response_body-}")
        if [[ "${installation_id:-}" = null ]]; then
          echo "::error::Failed to get the installation ID:"
          echo "${installation_response_body-}" | sed 's/^/::error::/'
          exit 1
        fi
        # Get the GitHub Apps token
        repo_name=$(echo "${GITHUB_REPOSITORY:?}" | cut -d '/' -f 2)
        token_response_body=$(
          curl --location --silent --request POST \
            --url "${GITHUB_API_URL:?}/app/installations/${installation_id:?}/access_tokens" \
            --header "Accept: application/vnd.github+json" \
            --header "X-GitHub-Api-Version: 2022-11-28" \
            --header "Authorization: Bearer ${jwt:?}" \
            --data "${API_APP_INSTALLATIONS_ACCESS_TOKENS_REQUEST_BODY-}"
        )
        token=$(jq -r '.token' <<<"${token_response_body-}")
        if [[ "${token-}" = null ]]; then
          echo "::error::Failed to get the GitHub Apps token:"
          echo "${token_response_body-}" | sed 's/^/::error::/'
          exit 1
        fi
        echo "::add-mask::${token-}"
        echo "token=${token-}" >>"${GITHUB_OUTPUT:?}"
    - name: DEBUG
      if: always() && inputs.debug == 'true'
      shell: bash
      run: |
        cat <<'DEBUG_DOC'
        == DEBUG =======================================================
        -- github -----------------------------------------------------
        github.event_name: ${{ github.event_name }}
        github.ref: ${{ github.ref }}
        -- toJSON(github) ----------------------------------------------
        ${{ toJSON(github) }}
        ================================================================
        DEBUG_DOC
